--UMA TRIGGER SEMPRE ESTÁ ASSOCIADO AO DML (DELETE, INSERT, UPDATE)/ ASSOCIADA A UMA TABELA
--EXISTEM 6 TIPOS DE TRIGGERS
--PODE SER EXECUTADA ANTES OU DEPOIS DO COMANDO
--PODE SER DISPARADA EM NÍVEL DE COMANDO E LINHA
--COMANDO: EXECUTA TODO O CORPO DA TRIGGER DE UMA UNICA VEZ
--LINHA: EXECUTA TODO O CORPO DA TRIGGER PARA CADA LINHA AFETADA

--PARA AS TRIGGERS DE LINHA, PODE SE UTILIZAR OS QUALIFICADORES OLD E NEW, PARA CAPTURAR OS DADOS ANTES E DEPOIS
--OLD E NEW É UTILIZAVEL APENAS NO UPDATE, POIS VC POSSUI O DADO ANTES DA ALTERAÇÃO E O DADO DEPOIS
--OLD E NEW NÃO SE APLICAM AO INSERT NEM AO DELETE
--AO DELETE POIS VC POSSUI UM DADO E DEPOIS ESSE MESMO DADO NÃO IRÁ EXISTIR
--AO INSERT POIS VOCÊ NÃO TEM O DADO E DEPOIS TERÁ

ALTER TABLE NOME_TRIGGER DISABLE; --DESABILITA A TRIGGER
ALTER TABLE NOME_TRIGEER ENABLE; --HABILITA A TRIGGER
ALTER TABLE NOME_TABELA DISABLE ALL TRIGGERS; --DESABILITA TODAS AS TRIGGERS DA TABELA
ALTER TABLE NOME_TABELA ENABLE ALL TRIGGERS; --HABILITA TODAS AS TRIGGERS DA TABELA
DROP TRIGGER NOME_TRIGGER;

CREATE OR REPLACE TRIGGER VALIDA_HORARIO_CURSO
BEFORE INSERT OR DELETE ON *TABELA* --ANTES DE INSERIR OU DELETAR EXECUTA OS COMANDOS ABAIXO
BEGIN
IF(To_Char(SYSDATE, 'D') IN (1,7) OR -- SE FOR (1= DOMINGO, 7= SABADO)
To_Number(To_Char(SYSDATE, 'HH24')) --PEGA APENAS A HORA
NOT BETWEEN 8 AND 23) THEN --SE NÃO ESTIVER ENTRE 8 E 23
Raise_Application_Error(-20001,'FORA DO HORARIO COMERCIAL'); --EXIBE MENSAGEM
END IF;
END;

INSERT INTO *TABELA* VALUES (...);--NO INSERT OU DELETE, SE OS CRITÉRIOS DA TRIGGER NÃO FOREM ATENDIDOS, ELE NÃP INSERE

----------------------------------------------------

--CRIA A TABELA DE AUDITORIA
CREATE TABLE AUDITORIA
(
 USUARIO VARCHAR(30),
 HORARIO DATE,
 DADOS_ANTES VARCHAR(4000),
 DADOS_DEPOIS VARCHAR(4000)
);

--INSERE A REGRA NA TABELA ANTES E DEPOIS DO UPDATE
CREATE OR REPLACE TRIGGER TGR_AUDITORIA
AFTER UPDATE OF TOTAL ON *TABELA*
DECLARE
--VERIAVEIS
BEGIN
INSERT INTO AUDITORIA(USUARIO, HORARIO)VALUES(USER, SYSDATE);
END;

SELECT * FROM AUDITORIA;
-----------------------------------------------------------

CREATE OR REPLACE TRIGGER VALIDA_HORARIO_CURSO2
BEFORE INSERT OR UPDATE OR DELETE ON *TABELA* 
BEGIN
IF(To_Char(SYSDATE, 'D') IN (1,7) OR -- SE FOR (1= DOMINGO, 7= SABADO)
To_Number(To_Char(SYSDATE, 'HH24'))
OT BETWEEN 8 AND 23) THEN
IF(INSERTING)THEN
Raise_Application_Error(-20001,'NÃO PODE INSERIR');
ELSIF(DELETING)THEN
Raise_Application_Error(-20002,'NÃO PODE REMOVER');
ELSIF(UPDATING('TOTAL'))THEN
Raise_Application_Error(-20003,'NÃO PODE ALTERAR O TOTAL');
ELSE
Raise_Application_Error(-20004,'NÃO PODE ALTERAR');
END IF;
END IF;
END;
--OBS: AO TENTAR EXECUTAR O DML, VERIFICA SE O "UPD, INS OU DEL" ATENDE AS CONDIÇÕES DA TRIGGER,
--CASO NÃO ATENDER, EXIBE A MENSAGEM DE ACORDO COM O DML A SER EXECUTADO
--------------------------------------------------------------------------

CREATE OR REPLACE TRIGGER TRG_AUDIT
AFTER INSERT OR DELETE OR UPDATE ON *TABELA*
FOR EACH ROW --EXECUTA UMA VEZ PARA CADA LINHA AFETADA
BEGIN
IF(DELETING) THEN
INSERT INTO AUDITORIA(USUARIO, HORARIO, OBS)
VALUES (USER, SYSDATE, 'LINHAS DELETADAS.');
ELSIF(INSERTING) THEN
INSERT INTO AUDITORIA(USUARIO, HORARIO, OBS)
VALUES (USER, SYSDATE, 'LINHAS INSERIDAS.');
ELSIF(UPDATING('SALARIO')) THEN
INSERT INTO AUDITORIA
VALUES (:OLD.NOME, SYSDATE, :OLD.SALARIO, :NEW.SALARIO, 'ALTERADO SALARIO');
ELSE
INSERT INTO AUDITORIA(USUARIO, HORARIO, OBS)
VALUES(USER, SYSDATE, 'ATUALIZAÇÃO ALUNO.');
END IF;
END;
--ANTES DE FAZER QUALQUER ALTERAÇÃO NA TABELA, VERIFICA O DML E EXECUTA A AÇÃO DE ENVIAR AS INFORMAÇÕES PRA AUDITORIA

CREATE OR REPLACE TRIGGER CALC_COMISSAO
BEFORE INSERT OR UPDATE OF TOTAL ON *TABELA*
REFERENCING OLD AS ANTIGO NEW AS NOVO
FOR EACH ROW
WHEN(NOVO.TOTAL >=5000)
DECLARE
VCOMISSAO NUMERIC(6,2) := 0.15;
BEGIN
IF(:NOVO.TOTAL <= 10000) THEN
:NOVO.VALOR_COMISSAO := :NOVO.TOTAL*(VCOMISSAO);
ELSE
:NOVO.VALOR_COMISSAO := :NOVO.TOTAL*(VCOMISSAO + 0.01);
END IF;
END;


--TRIGGER VIEW E DML
CREATE OR REPLACE VIEW VCONTRATOS_PARES
AS SELECT COD_CONTRATO, DATA, COD_ALUNO, DESCONTO, TOTAL
FROM *TABELA*
WHERE Mod(COD_CONTRATO, 2) =0; --SE O RESTO DA DIVIDÃO FOR 0;

CREATE OR REPLACE TRI_CONTRATOS_PARES
INSTEAD OF INSERT OR DELETE OR UPDATE ON VCONTRATOS_PARES --INSTEAD OF --AO FAZER UM DML NA VIEW, ELE NÃO IRÁ INSERIR UM VALOR, IRÁ APENAS EXECUTAR A TRIGGER
DECLARE
BEGIN
INSERT INTO AUDITORIA(USUARIO, HORARIO, OBS)
VALUES(USER, SYSDATE, 'DML DA VIEW VCONTRATOS_PARES.')
END;

