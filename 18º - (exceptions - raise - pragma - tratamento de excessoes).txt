DECLARE
..
BEGIN
..
CONDIDÇÕES --DE ACORDO COM O RETORNO DAS CONDIÇÕES, CAI EM UMA EXCEPTION ESPECIFICA
..
EXCEPTION
WHEN No_Data_Found THEN --NÃO HÁ DADOS NO RETORNO CAUSANDO EXPETION
Raise_Application_Error(-20001, 'ALUNO INEXISTENTE! '||SQLCODE|| ' ' ||SQLERRM); 
WHEN Too_Many_Rows THEN --DUPLICIDADE DE ITENS NO RETORNO
Raise_Application_Error(-20002, 'REGISTRO DUPLICADO! '||SQLCODE|| ' ' ||SQLERRM);
WHEN OTHERS THEN --OUTRO ERRO, NÃO IDENTIFICADO
Raise_Application_Error(-20001, 'EXCESSÃO DESCONHECIDA! '||SQLCODE|| ' ' ||SQLERRM);
END;

DECLARE
DT_VENCIMENTO DATE;
VCONTA NUMBER := 10;--CODIGO DA CONTA
ECONTA_VENCIDA EXCEPTION; --FUNÇÃO QUE PASSA VARIAVEL COMO EXCESSÃO
BEGIN
..
IF DT_VENDA < Trunc(SYSDATE) THEN --CONDIÇÃO
RAISE ECONTA_VENCIDA; --RAISE FORÇA A CAIR NA EXCESSÃO CASO ATENDA A CONDIÇÃO
END IF;
EXCEPTION
WHEN ECONTA_VENCIDA THEN
Dbms_Output.Put_Line('CONTA VENCIDA');
UPDATE *TABELA* SET VALOR = VALOR + JUROS --O VALOR DO JUROS ESTÁ ESTIPULADO NA TABELA
WHERE CODIGO = VCONTA;
END;

DECLARE
EFK_INEX EXCEPTION;
PRAGMA EXCEPTION_INIT(EFK_INEX, -02291); --CAPTURA O ERRO E TRANSFORMA O ERRO (Nº) NO EFK_INEX
BEGIN
INSERT INTO *TABELA* VALUES(100, 100, 'ERRO'); --ESTÁ INSERIONDO FK QUEM NÃO EXISTE NA TABELA CORRESPONDENTE
EXCEPTION
WHEN EFK_INEX THEN --TRATA O RETORNO INFORMANDO UMA MENSAGEM AO USUÁRIO
Raise_Application_Error(-20200, 'CIDADE INEXISTENTE');
END;
